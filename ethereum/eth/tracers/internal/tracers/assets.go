// Code generated by go-bindata.
// sources:
// call_tracer.js
// DO NOT EDIT!

package tracers

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _call_tracerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3a\x5d\x6f\xe3\x38\x92\xcf\xf6\xaf\xa8\xce\xc3\xc4\x46\x1c\xdb\xe9\x9e\x9b\x03\x9c\xc9\x1c\x72\xe9\xf4\x4c\x16\x99\x4e\x90\x8f\x6d\x0c\x1a\x79\xa0\xa5\x92\xcd\x8e\x4c\x6a\x49\x2a\x8e\x77\x36\xff\xfd\x50\x45\x4a\x96\x2d\xd9\xf9\x98\xed\xc3\x5d\x1e\x02\x8b\x64\x15\xab\x8a\xf5\x4d\x0e\x06\x70\xa2\xb3\x85\x91\x93\xa9\x83\xf7\xc3\x83\xff\x84\x9b\x29\xc2\x44\xef\xa3\x9b\xa2\xc1\x7c\x06\xc7\xb9\x9b\x6a\x63\xdb\x83\x01\xdc\x4c\xa5\x85\x44\xa6\x08\xd2\x42\x26\x8c\x03\x9d\x80\x5b\x5b\x9f\xca\xb1\x11\x66\xd1\x6f\x0f\x06\x1e\xa6\x71\x9a\x30\x24\x06\x11\xac\x4e\xdc\x5c\x18\x1c\xc1\x42\xe7\x10\x09\x05\x06\x63\x69\x9d\x91\xe3\xdc\x21\x48\x07\x42\xc5\x03\x6d\x60\xa6\x63\x99\x2c\x08\xa5\x74\x90\xab\x18\x0d\x6f\xed\xd0\xcc\x6c\x41\xc7\xaf\x9f\x6f\xe1\x1c\xad\x45\x03\xbf\xa2\x42\x23\x52\xb8\xcc\xc7\xa9\x8c\xe0\x5c\x46\xa8\x2c\x82\xb0\x90\xd1\x88\x9d\x62\x0c\x63\x46\x47\x80\x9f\x88\x94\xeb\x40\x0a\x7c\xd2\xb9\x8a\x85\x93\x5a\xf5\x00\x25\x51\x0e\x0f\x68\xac\xd4\x0a\x3e\x14\x5b\x05\x84\x3d\xd0\x86\x90\x74\x84\x23\x06\x0c\xe8\x8c\xe0\xba\x20\xd4\x02\x52\xe1\x96\xa0\x2f\x10\xc8\x92\xef\x18\xa4\xe2\x6d\xa6\x3a\x43\x70\x53\xe1\x88\xeb\xb9\x4c\x53\x18\x23\xe4\x16\x93\x3c\xed\x11\xb6\x71\xee\xe0\xcb\xd9\xcd\x6f\x17\xb7\x37\x70\xfc\xf9\x0f\xf8\x72\x7c\x75\x75\xfc\xf9\xe6\x8f\x43\x98\x4b\x37\xd5\xb9\x03\x7c\x40\x8f\x4a\xce\xb2\x54\x62\x0c\x73\x61\x8c\x50\x6e\x01\x3a\x21\x0c\xbf\x9f\x5e\x9d\xfc\x76\xfc\xf9\xe6\xf8\xbf\xcf\xce\xcf\x6e\xfe\x00\x6d\xe0\xd3\xd9\xcd\xe7\xd3\xeb\x6b\xf8\x74\x71\x05\xc7\x70\x79\x7c\x75\x73\x76\x72\x7b\x7e\x7c\x05\x97\xb7\x57\x97\x17\xd7\xa7\x7d\xb8\x46\xa2\x0a\x09\xfe\x79\x99\x27\x7c\x7a\x06\x21\x46\x27\x64\x6a\x0b\x49\xfc\xa1\x73\xb0\x53\x9d\xa7\x31\x4c\xc5\x03\x82\xc1\x08\xe5\x03\xc6\x20\x20\xd2\xd9\xe2\xc5\x87\x4a\xb8\x44\xaa\xd5\x84\x79\xde\xa8\x90\x70\x96\x80\xd2\xae\x07\x16\x11\x7e\x9e\x3a\x97\x8d\x06\x83\xf9\x7c\xde\x9f\xa8\xbc\xaf\xcd\x64\x90\x7a\x74\x76\xf0\x4b\xbf\x4d\x38\x23\x91\xa6\x37\x46\x44\x68\xe8\x70\x04\x24\x39\x89\x3f\xd5\x73\x05\xce\x08\x65\x45\x44\x47\x4d\xbf\x23\x56\x46\xe1\x00\x1f\xe9\xcb\x59\x52\x5a\x30\x98\x69\x43\xbf\xd3\xb4\xd0\x33\xa9\x1c\x1a\x25\x52\xc6\x6d\x61\x26\x62\x84\xf1\x02\x44\x15\x61\xaf\xca\x0c\xa9\x91\x3f\x6e\x90\x2a\xd1\x66\xc6\x6a\xd9\x6f\xff\xd9\x6e\x05\x0a\xad\x13\xd1\x3d\x11\x48\xf8\xa3\xdc\x18\x54\x8e\x44\x99\x1b\x2b\x1f\x90\x97\x80\x5f\x13\xe4\x79\xfa\xf7\xdf\x01\x1f\x31\xca\x3d\xa6\x56\x89\x64\x04\x5f\xef\x7a\x6d\x00\x00\xeb\x30\x3b\xd1\x39\x11\xeb\x07\x5b\x33\x74\x53\x1d\x7f\xc4\xcc\x4d\xbf\x5c\x9c\x68\xc5\x6c\x9e\x10\xe4\x12\x2a\x6c\x5e\xcc\x1e\xc7\xb1\x41\x6b\x47\xb0\xb3\xe3\xe7\xe3\x3c\xab\xac\x4e\xf5\x64\x04\x5f\xff\x7c\x0a\x9f\xff\x44\xa3\x69\xed\xf0\x2f\xfe\x85\xbd\x32\x83\x0f\x17\xd9\x72\xef\x44\x1a\xeb\xfe\x96\xcf\xb2\x11\x38\x93\x63\xaf\xcd\xa3\x83\x01\xc4\x68\x23\x54\x31\xc6\x7c\x8e\xf7\x16\xe6\x53\xd6\x1c\x98\xe3\xee\x03\xc2\xb7\xdc\xba\xca\x9a\xc4\xe8\x19\x08\x05\x3a\x27\xcb\xae\x6a\x81\x54\x4e\xf3\x99\x08\xfa\xad\xd0\xb0\xe4\xfb\xed\x56\x09\x3c\x82\x44\xa4\x96\xb6\xa6\x65\x24\x62\x3a\x35\xa9\x1e\xf4\x3d\x61\xd6\x86\x4c\xd5\x2c\x40\x67\x91\x8e\x83\xd1\xd3\x79\x95\xc7\x85\xb6\xdf\x6e\x11\xdc\x08\x92\x5c\xf1\xb6\x9d\x54\x4f\x7a\x10\x8f\xbb\xf0\x67\xbb\x45\x68\x4f\x44\xe6\x72\x83\xac\x37\x68\x8c\x36\x16\xe4\x6c\x86\xb1\x14\x0e\xd3\x05\x33\x4d\x7f\x32\x81\x8e\x9b\x4a\xdb\x6f\x3e\x33\x38\x3a\x82\x9d\x1d\x42\x0a\x95\xbf\xad\x00\x74\x9e\xfd\x28\x8c\xf6\x27\x58\xcc\x94\x18\x9e\xea\x9b\x6f\x56\xaa\xaf\x5b\xf6\xba\x23\xea\x54\x9e\xa6\x8d\xf4\xbd\x19\x27\x0c\xb7\x91\x5a\xb1\x88\xb7\xd3\xf6\x72\x24\x30\x3c\x6c\xa0\xe6\x55\x48\xf6\xf6\x0e\xdb\xad\xd6\x83\x30\x5e\x0f\xc2\x09\x4d\xd0\x9d\xd2\x67\xa7\x4b\xb3\xc4\x9e\x9f\x7d\x77\x74\xc4\x41\x35\x91\x0a\x63\xaf\x4d\x2d\xc6\x9e\x88\x3c\x75\xa5\x9a\x11\x50\xcb\xa0\xcb\x8d\xa2\x9f\x4f\x5e\xe9\xbe\x20\x68\x95\x2e\x20\xa2\xe0\x29\xc6\x14\x75\xec\xc2\x3a\x9c\x05\x5d\xb6\x3d\x48\x84\x25\x8b\x91\x09\xcc\x91\x8c\x73\x3f\x9a\x22\xb9\x24\x15\x61\xa0\xd2\x2e\x2c\xfb\xaa\x23\xa0\xdd\xfa\x3a\xeb\x3b\xfd\x39\x9f\x8d\xd1\x74\xba\xf0\x03\x0c\x1f\x93\x61\x97\xa4\x4b\x3f\x96\xc2\x21\x48\x9d\x05\xe6\x18\xe6\xda\x19\xa9\x26\x9e\xbf\xc1\x80\x9c\xbe\x00\x85\x73\x28\x74\x93\x8c\x6e\x8c\x52\x4d\x20\x32\x28\x1c\xc6\x3d\x10\x71\x0c\x4e\x7b\x07\x5a\xba\xcb\x72\x0b\x8a\xd9\x17\x1f\x2f\x46\xc0\x24\x07\xa9\x15\xd4\xfe\xf0\x03\x6f\x7f\x04\xbb\x27\x57\xa7\xc7\x37\xa7\xbb\x41\x76\x44\x97\x54\x17\x49\x12\x48\x63\x94\xfd\x0c\xf1\xbe\x73\xd0\xed\x3f\x88\x34\xc7\x8b\xc4\x13\x19\xd6\x9e\xaa\x18\x8e\x02\xcc\xde\x3a\xcc\xfb\x15\x18\x02\x1a\x0c\xe0\xd8\x5a\x9c\x8d\x53\xac\x47\x96\x10\x7a\x38\x0a\x59\x47\xa1\x97\xdc\x4b\xa4\x67\x59\x8a\xe4\x36\x8a\x5d\x83\xc0\x99\xe2\x96\x5b\x64\x38\x22\x86\x75\xd6\xe3\x01\x72\x76\x3c\xe0\xf4\x6f\xf8\xd8\xd9\x60\xe0\x9d\x6e\xd7\x2f\x97\x2a\xcb\xdd\x68\x65\xf9\x0c\x67\xda\x2c\xfa\x96\x22\x6b\x87\x59\xeb\x79\x4e\x0b\x98\x89\xb0\x67\x6a\xe4\xa3\x01\xe1\xfc\x55\xd8\xce\x72\xea\x44\x5b\x37\x2a\xa6\xe8\xa3\x98\x63\x59\x10\xd8\xee\xf0\x71\xb7\x2e\xad\x61\x77\xa9\x07\x07\x3f\x75\x09\xe4\xe9\xb0\xd4\xe8\x32\xde\xf5\xb3\xdc\x4e\x3b\xf4\xd9\x5d\xce\x2e\x7d\xfd\x11\x47\x8a\x46\x85\x67\xa5\xaa\x2b\x94\xc5\x34\xa1\x60\xe1\x4c\x1e\xb1\x62\x4d\x04\x87\x12\x76\xe5\x82\x52\x08\x9b\x8f\x59\xe6\x4e\xeb\x8d\x8a\x74\x7d\x7a\xfe\xe9\xe3\xe9\xf5\xcd\xd5\xed\xc9\x4d\x55\x9d\x52\x4c\x1c\x11\xb5\xca\x43\x8a\x6a\xe2\xa6\x4c\xff\xd2\xa9\x17\xb3\x5f\x09\x66\xff\xe0\xce\x8f\xc0\x51\x83\x91\xb7\xb6\x43\xc0\xd7\x3b\xc6\xfd\x54\x17\xdf\xea\x52\x2f\xcc\x3f\xbd\x12\xe9\xec\xa9\xea\x2a\x58\x70\x81\xdf\xc0\xe4\xdf\x6e\x7f\xbf\xdc\x5d\x77\x92\xc4\xe5\xb7\x7c\x96\x5d\x9e\xd4\xad\x66\xd8\x2d\xe4\x90\x45\x4b\x5f\x76\x79\xd2\xe9\xb6\x57\x70\xd4\x85\x10\x44\x04\xbf\xc0\xc1\xfa\x86\xc5\xa6\xc1\x0e\xd6\xf8\x6b\x46\xb3\x0f\x07\x77\x87\x35\x2c\xc1\x49\x94\x3e\xc2\x33\xcb\x29\x40\x16\xc1\x1e\x1c\x10\xd7\x9e\xb7\x42\xf0\xad\xc6\x5d\xfb\x99\xce\xc8\xc6\xd7\x37\x28\x48\xdd\xae\x05\x4d\x50\xaf\x57\x8b\x26\x2c\x65\xfc\xd9\xae\x2a\x4d\x60\x4f\x8d\xa3\x2c\x1b\x9d\xbb\x2c\x27\x7e\x76\x86\x8f\x3b\xcd\xd0\xe4\xb9\x3a\xec\x22\xe1\x08\x0e\x0e\x41\xc2\xcf\x15\xdd\xf0\x8c\x77\xba\xb0\xef\x11\xc6\x14\xf8\x0f\x41\xee\xed\x6d\x63\xa4\xba\xf7\xde\x51\x10\x0f\x67\xa0\x75\x67\x22\x57\x9d\x49\x37\x78\xb3\xfd\x9f\x7e\xdc\x70\x4a\xcd\xec\x96\xea\x30\x11\xb6\x1e\x6d\xb7\x12\x3a\x11\xf6\xd6\xb2\x43\x0a\xee\x6e\x2c\x27\x67\xca\x2d\xd1\xed\x97\xeb\xc8\x49\xc2\xfe\x8a\x37\x5d\x25\xff\x35\x24\xc7\x98\xa2\xc3\x12\xf7\x99\x3a\x5c\x1f\xa2\xed\x36\x2b\xdd\xdb\xd9\xdd\xc8\xea\xdb\x99\x79\xde\x77\x85\x40\xb0\x11\xf8\x8d\x99\xe5\xfe\x7e\x33\xce\xd2\x35\x06\xe7\xfa\xb4\xea\xc7\x06\x03\xa0\x72\x25\xd4\xfe\x96\x2a\x57\x2a\xe0\x38\xcc\xa3\x75\x94\xaf\xe4\x76\x2d\x31\x61\x9f\x93\x45\xe4\xe9\x86\xc3\x67\x7c\x5d\x7d\xb2\x95\x45\x23\xff\x2b\x8b\x7a\x8d\x24\x7b\xff\x35\x2a\x7e\x34\x2f\x5a\x49\x23\x9a\x16\xbc\x22\xad\x68\xc4\xaf\x47\xc5\x8f\xb7\x80\x97\x59\x0a\x79\x9c\x3d\x1f\xf2\xf3\xcc\xf6\xbf\x69\xa9\x3a\xbb\xbb\x1b\xa0\x26\xc2\xfa\x5d\x57\xf3\x94\x0d\x4b\x1b\xf3\x96\xa6\xb5\xec\xad\x8a\xf4\xa7\xe6\xd0\x96\xc4\x95\xa1\xe7\x7d\x1d\xcf\x53\x5d\xbd\xb6\xa4\x39\x35\x71\x14\xc1\xa1\x2c\x90\xe1\x9d\x4f\x7c\x36\xd9\xe9\x5f\xb1\x05\xaa\x49\x6a\xf4\x37\x93\xbf\xa4\xe7\xc8\xd7\xcd\xab\x90\x4f\xed\x15\x8b\xf1\x99\x45\xdf\xe6\x63\xeb\xbd\xc3\xb0\x07\x1f\xb8\x5c\xd8\xfd\x78\x5b\x4f\x34\x4a\xae\x7d\x9b\x80\x58\x6e\x5c\x57\x52\x43\xa7\xc0\x11\xae\xbd\x99\xf4\xe5\x71\xb1\xc0\xb7\x06\x15\x9d\x7d\xfd\x70\x47\xa9\xc4\xe6\xe0\x52\x39\xac\x27\xc0\xd4\x62\x03\x0f\x0d\x2c\x13\x2b\x97\xb7\xd7\x6f\x67\x85\x33\xb5\x6a\xe1\xe4\xcf\x9a\x1b\x15\x91\xf0\xbd\x8e\x22\xe1\x8d\xb5\xc2\x4d\xe5\x53\x2d\xbd\x2d\x52\xbf\x93\xe3\xf3\xf3\x5d\xf8\xd7\xbf\xa0\xf2\x7d\x72\xf1\xf1\xb4\x3a\xf6\xf1\xf4\xfc\xf4\xd7\xe3\x9b\xd3\xf5\xb5\xd7\x37\xc7\x37\x67\x27\x3c\xda\x0d\x79\xd4\x60\x00\xd7\xf7\x32\xe3\x8e\x07\x17\x96\x7a\x96\x71\x8b\xba\xa4\xd7\xf6\xc0\x4d\xb5\x45\xa0\xf2\x94\x1b\x3a\x89\x50\x51\xd1\x68\xb1\xb5\x14\xd4\x69\x4a\xb0\x74\xe1\x49\xea\xe5\xdb\xca\x91\x95\xa9\xb7\xb4\x97\x06\xc3\xee\x71\xc7\xe9\x82\xc0\x65\x12\xec\x1d\x3d\x97\xac\x5c\x18\x76\x5e\xce\x2d\xfc\x17\x0c\x61\x04\x07\xa1\xfa\xdb\x52\x5e\xbe\x87\x3d\x42\xff\x86\x22\xf3\x43\x03\xe4\x77\x29\x35\x81\x63\x4c\x70\xe3\x95\x4c\xbe\xf7\x6f\xa9\x43\xd7\x02\x84\xd3\xff\xfb\xf5\xa9\xce\xdd\x45\x92\x8c\x60\x5d\xc2\x3f\xd6\x24\x5c\xae\x3f\x47\x55\x5f\xff\x1f\xb5\xf5\xcb\x5a\x36\x14\x53\xef\x6a\xfa\xe3\x2b\xc9\x77\x6b\xd6\x12\x74\x91\x13\x29\xc6\xb6\xcc\xb1\xea\xbd\x86\xd5\x24\xab\xb9\xfc\x5b\xaf\x9e\xb9\x34\x33\xf8\x20\x75\x6e\xeb\xdd\xc1\x2d\x51\xe1\x15\x3d\xc6\xf2\x44\x0f\xff\x9d\x8d\xbf\xe7\xc0\x37\x70\x75\xd7\x40\xc4\xeb\x3a\x7c\x9b\x7a\x0e\xcd\x5d\xb6\xb3\xa4\xb9\x27\x2d\x95\xd3\xab\x5d\xe7\x1e\x25\x97\x46\xe2\x03\x82\x74\xbb\x96\x71\x82\x48\x53\x3d\x17\x2a\xc2\x3e\x7c\x41\x8f\x51\x21\xb2\xe7\x0e\xb7\x16\x14\x52\xb8\xc1\x3d\x97\x6e\x1a\xee\x9f\xd8\x6c\x05\x5f\x2e\x18\x84\x99\x58\xc0\x18\x21\xc9\xd5\xfd\x82\x12\x1d\x88\x17\x4a\xcc\x64\x64\x3d\x3e\xbe\xb1\x30\x38\x11\x86\xd1\x1a\xfc\x47\x8e\xd6\x61\xcc\xce\x41\x44\x2e\x17\x69\xba\x80\x89\x7c\x40\xc5\xd0\x9d\xf7\x1f\x86\x43\xb0\x4e\x66\xa8\xe2\x1e\xfc\xf4\x61\xf0\xd3\x8f\x60\xf2\x14\xbb\xfd\x76\xa5\x9d\x51\xb2\x1a\x94\x98\x26\x82\xd1\xf1\x79\x75\xba\xf0\xcb\x86\x8a\xb8\xc8\xa2\xde\xa8\x1c\x1b\x7a\x24\xdf\x63\x2b\xee\x2b\x84\xda\xa7\xea\x6c\xbc\xf9\x15\x09\x40\xcb\xbb\x63\x4a\xfb\x3b\xf7\xc2\x88\x54\x8c\xb1\x3b\xe2\x3b\x45\x3e\xa9\xb9\x08\x97\x4a\xa4\x12\x90\xa5\x42\x2a\x10\x51\x44\x1a\x49\xc7\x5e\x5c\xd1\xa4\x0b\x0a\xdd\xbb\xae\xc0\xc7\xd7\x6f\x22\x8a\xc8\xca\x42\x24\x67\x9d\x21\x72\xc4\x8c\xa0\x41\x2a\x2b\x63\xac\xe8\x04\xf9\x7b\xcd\x51\x37\xac\x98\xcb\x34\x2d\x10\xce\xb4\xa5\x4d\xc6\x08\x73\xa3\xd5\x04\xac\x54\x11\x5f\xe6\xc6\x48\x67\x6d\x41\x2b\x10\x90\x16\x35\x0d\xd5\xe1\xc2\x4c\x6c\xdf\x87\x72\xda\x96\xa2\x88\xd2\xf3\xfe\xaa\xf7\xa9\x5a\x4a\xc8\x0a\x57\x9a\x72\x0a\xf0\x51\x5a\xc7\xdd\x5d\xa2\x52\xda\x50\x67\x49\x35\xe9\x41\xa6\x33\x8e\xbc\xcf\x65\x2a\x21\xfc\x5e\x9d\xfe\xfd\xf4\xaa\x6c\xc1\xbd\xb8\x39\xd4\x2f\xfa\xed\x3b\xe5\x2d\x1b\x18\x7c\x40\xe3\x30\xde\x69\x30\xed\x06\x75\x3e\xfa\x3e\xea\xcc\x09\x67\x99\x35\x5d\x56\xa4\x91\x0a\xeb\x96\xe7\x3a\x41\x7f\xf3\x54\xa5\xdf\xe6\xa9\xb3\x6b\xc1\xbc\xb9\x73\xd5\xae\x36\xbf\x28\x98\xaf\xb7\xc7\xd7\xd3\xd2\xa6\x4e\x50\xd0\xa3\xb3\xca\x61\xcd\xb9\x83\xea\xf1\x54\x3c\x1c\xcf\x17\xad\x58\x11\x42\x05\x71\x11\x30\x52\x8e\xb7\x0c\x7d\xcf\xf5\x52\xce\xd4\xeb\xba\x29\x84\xf8\xa5\x7d\x92\xd0\xba\x36\x44\x7b\x53\x83\xf3\xb0\xec\x1b\xbe\x33\xe8\xfa\xf8\x8f\x5c\xa4\xb6\x33\xec\xae\x34\x0c\xfb\x4e\xb3\xd0\x96\xc1\xb0\xc8\x7f\x08\x66\x25\x33\x0d\x08\x5b\xab\xf2\xf5\x60\xf1\xd8\xe7\x2c\x31\x6e\xc5\x10\x50\x04\xff\x53\x9e\x6a\xd0\xf0\xa6\x76\x72\xab\xba\x00\x76\xca\x5c\x31\x11\x32\xcd\x0d\xee\x1c\x42\x83\xff\xb2\xb9\x49\x44\xc4\x67\x69\x11\xf8\xca\xc9\x82\xd5\x33\x9c\xea\x79\xa5\x43\xb2\xe6\x05\xeb\xca\x51\xea\xc1\x5a\x14\xe4\x27\x01\xc2\x42\x6e\xc5\x04\x2b\xca\xf1\x62\x55\xdc\xde\xce\x6a\xfd\x05\xf5\xda\x83\x4a\x1b\x6f\x9b\xa6\xf9\x5d\x9e\x55\x9f\x6d\xfa\xd3\xa8\x09\xb5\x3c\xb8\x58\xc4\xd9\x70\xe5\xa3\x20\xd5\x27\xab\xa5\x76\xbd\x46\x37\xbe\x8f\x72\x78\xed\x08\xff\x5f\x6a\x8c\xeb\x6b\x3d\x8f\xab\x8b\x3d\xa7\xcb\x04\xf8\x79\x2d\x78\x75\x03\xb3\x40\x4d\xea\xac\xbe\x61\xe4\x96\x2a\xcd\x79\x1d\x7d\x15\xf9\x27\x68\x85\xff\x9f\x2e\x83\xca\xda\x80\xd6\x57\xdb\x2d\x47\xa0\xb3\xc3\x76\xeb\x29\x3c\x85\xe0\x23\xad\xbe\x85\x98\x4f\xc3\x93\x25\x9f\x33\x56\xe2\x90\xe6\x18\x1f\x5e\x48\x24\xfe\x31\x51\x8b\xe1\xb7\xbc\x89\x08\x7e\xc2\xe9\x8c\xd2\x92\x10\xe6\x52\x83\x22\x5e\x94\x81\xb9\xe7\x13\x22\x98\x0a\x15\x87\x32\x57\xc4\xb1\x24\x7c\xac\x9f\x44\xa1\x98\x08\xa9\xda\x8d\xa2\xfd\x7e\x19\xe1\xe6\xeb\xf9\x5a\x81\x50\x0d\xe8\xa1\xcd\x21\x53\x8c\x99\xe1\xf6\x0b\x02\xf7\x9a\x79\xae\x3f\x17\x08\x0f\x4c\xb4\xb2\xf9\x8c\xcb\x09\x10\x0f\x42\xa6\x62\x9c\x86\x44\x51\xc5\x10\xa5\x28\x94\x7f\xfb\x86\x89\xd3\x0f\x68\x6c\xfb\x05\x76\xf3\x16\xb3\x59\xf3\xb7\xc5\x67\x10\xc7\xcb\xdd\xc0\x4b\x9d\x80\x67\xff\x53\x2a\x9c\x0b\xda\x59\x11\xaf\x37\x56\xe9\xf8\x59\x24\x2a\xd7\x7e\x99\x95\x72\xea\x47\x6b\x7e\x81\x61\xa5\xb8\xf9\xbf\x62\xb7\x75\x15\x3b\x2f\xf3\xc4\xc0\xbc\xd3\xba\x07\x29\x0a\x2e\x35\x8b\x47\x8b\x45\x5a\xbd\xad\x61\x50\x18\xbf\xcf\x2c\x6b\xd6\xcf\x97\xe4\x53\x2c\x7a\x74\xbe\x42\x19\x23\x2a\x90\x0e\x8d\xa0\xa2\x92\xb4\x2b\xbc\xb3\x23\x2a\x2d\xa3\xe3\x73\x91\x64\xb3\x01\x71\x78\xf4\x46\x96\x25\xd5\xa4\xdf\x6e\xf9\xf1\x8a\xbb\x88\xdc\xe3\xd2\x5d\xf8\xf8\xca\x90\xbe\x59\xb5\xd2\xab\x5a\x93\xdd\xf0\xae\xbf\x7e\x55\x52\x5e\x91\xd4\x97\x16\x97\x26\xd5\x16\x57\xe4\x1e\x39\x45\xe6\xd1\xb5\x3e\x17\xcd\xd1\x90\xef\x11\xad\x75\xb5\x18\x30\x74\xb6\xd6\x5f\x43\xd0\x1c\x8f\xad\x18\x0d\x2f\x2d\xef\x31\xd6\xcc\xcc\x3d\xd6\xad\xac\x00\x20\x03\x1b\x35\x03\xd0\x54\x03\xd0\x5a\xa7\x8d\x16\xf3\x90\x9f\xf5\xf9\xc7\xa8\x3a\xeb\x87\x02\xa3\x72\x56\x91\x8d\x9c\xb1\x6c\x9e\x0e\x9b\xfd\xee\xb0\xd0\xf1\x66\x07\x49\xe7\x58\x1a\xc1\x06\xd0\x6a\x19\x56\x5f\xb2\xcd\xfd\x32\xf6\xc2\x5b\x6e\x00\x65\xec\x95\x0c\xc9\x3d\xbe\x1c\x65\xb9\xb8\x4a\xe2\xca\x9a\x26\x24\xc1\x77\x85\x75\x5e\xb2\x05\x02\x6f\x29\xc5\x05\x8b\x12\xa9\xfc\x27\x06\x8c\x55\x9b\x2c\xa6\xc0\xa0\x7f\x23\xc5\xb9\x35\x99\xa4\x1e\x73\x8e\x92\x5b\xaa\xb0\x97\xb6\x16\xa3\x95\x06\x63\x48\x24\xa6\x31\xe8\x18\x0d\xd7\xef\xdf\xac\x56\xfe\xb1\x23\x1a\x49\x18\xfd\xe3\x55\xff\x8e\x9c\x9f\xd4\x2a\x19\xa1\x5b\x40\x82\x82\x5f\x2d\x3a\x0d\x99\xb0\x16\x66\x28\xa8\x62\x4f\xf2\x34\x5d\x80\x36\x31\x12\xf2\xb2\x06\x25\x33\xd7\x90\x5b\x34\x16\xe6\x53\x1d\x22\x37\x27\x93\x19\xe5\xc6\xd2\xf5\x42\x8f\x4c\xda\x2c\x15\x0b\x90\x8e\xb2\x84\xc0\x54\xd5\xf2\x85\x7f\xa8\x17\x1e\xa0\x69\x4a\x04\x6a\x57\xa3\xa5\xf1\x47\xfe\x31\x47\x2f\x38\x05\xff\x10\xb3\x18\xa7\xaf\x0d\x9e\x80\xe7\x1b\x8d\xbf\x28\x90\x57\xad\x9f\x87\xe9\x6b\xd5\xee\x43\xf1\xb7\x6a\xf1\xcb\x76\xee\xaa\x79\x17\x41\x6e\xd5\x86\xab\x21\x73\xd5\x50\x79\x86\xbf\x56\x4d\xb4\x52\x30\xf0\x04\xab\x5d\x09\xc0\x5f\x6b\x46\xcb\x54\x06\xab\xf5\x4f\x8b\xcb\xe5\xfc\xd5\x0b\xaa\x58\x3e\xeb\xb8\xc7\x05\xc5\x0d\x2f\xfd\x4a\x10\xf4\x03\x5f\xef\x71\x71\xd7\x1c\xf3\x82\xa2\x57\xd6\x95\x41\xae\x30\x16\x3f\xb7\xc5\x45\x2c\x1f\x97\x1c\x0d\x0f\x41\xfe\x5c\x05\x28\xe2\x74\xf1\x98\x84\xf6\xac\xce\x7f\x95\x65\xf3\xb8\xb4\xa5\xb5\xf9\xee\x0a\x45\xc1\xfa\xfc\x1a\x32\xb7\xf6\x53\xfb\x7f\x02\x00\x00\xff\xff\x2c\x8c\xc6\x9f\x80\x31\x00\x00")

func call_tracerJsBytes() ([]byte, error) {
	return bindataRead(
		_call_tracerJs,
		"call_tracer.js",
	)
}

func call_tracerJs() (*asset, error) {
	bytes, err := call_tracerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "call_tracer.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"call_tracer.js": call_tracerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"call_tracer.js": {call_tracerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
